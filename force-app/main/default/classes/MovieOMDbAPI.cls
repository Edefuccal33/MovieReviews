public class MovieOMDbAPI {
    
    private static final OMDbApiSettings__mdt apiData = [SELECT ApiKeyValue__c, OMDbURLBase__c FROM OMDbApiSettings__mdt];  
    private static final String API_URL = apiData.OMDbURLBase__c;
    private static final String API_KEY = '&apikey=' + apiData.ApiKeyValue__c; 
    
    private static final String GET_REQUEST_METHOD = 'GET';
    private static final String BY_ID_SEARCH_PARAMETER = 'i=';
    private static final String BY_TITLE_SEARCH_PARAMETER = 's='; //NO SE USA!!
    
    //Error messages from OMDb API:
    private static final String ERROR_IMDb_INVALID_ID = 'Incorrect IMDb ID.';//da un c√≥digo 200
    private static final String ERROR_API_KEY_NOT_PROVIDED = 'No API key provided.';
    private static final String ERROR_API_KEY_INVALID = 'Invalid API key!';
    
    //Custom error messages:
    private static final String CUSTOM_MESSAGE_BAD_REQUEST = 'The movie Id provided does not exist on IMDb API.';
    private static final String CUSTOM_MESSAGE_MISSIG_APIKEY = 'API Key was not provided.';
    private static final String CUSTOM_MESSAGE_INVALID_APIKEY = 'Provided API Key is invalid.';
    
    public MovieOMDbAPI() {}

    public static Object getMovieById(String movieId){
        
        final String endPoint = API_URL + BY_ID_SEARCH_PARAMETER + movieId + API_KEY;
        HttpResponse response = getResponse(endPoint);
        
        if(errorHandler(response) == null){
            Object movie = (Object) JSON.deserializeUntyped(response.getBody());
            return movie;
        }
        return null;
    }
    
    //NO SE USA!!
    public static List<Object> getMoviesByTitle(String title){

        final String endPoint = API_URL + BY_TITLE_SEARCH_PARAMETER + title + API_KEY; 
        HttpResponse response = getResponse(endPoint);
        
        if(errorHandler(response) == null){
            Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
            List<Object> movies = (List<Object>) results.get('Search');
            return movies;
        }
        return null;
    }
    
    private static HttpResponse getResponse(String endPoint){
        Http http = new Http();
        HttpRequest request = new HttpRequest();
        request.setEndpoint(endPoint);
        request.setMethod(GET_REQUEST_METHOD);
        HttpResponse response = http.send(request);
        
        return response;
    }
    
    private static IMDbAPIException errorHandler(HttpResponse response){
        Map<String, Object> results = (Map<String, Object>) JSON.deserializeUntyped(response.getBody());
        String errorMessage = (String) results.get('Error');
 
        if(string.isNotBlank(errorMessage)){
            if (errorMessage.equalsIgnoreCase(ERROR_IMDb_INVALID_ID)){
                throw new IMDbAPIException(400,CUSTOM_MESSAGE_BAD_REQUEST);
            } 
            if(errorMessage.equalsIgnoreCase(ERROR_API_KEY_NOT_PROVIDED)){
                throw new IMDbAPIException(403,CUSTOM_MESSAGE_MISSIG_APIKEY);
            }
            if(errorMessage.equalsIgnoreCase(ERROR_API_KEY_INVALID)){
                throw new IMDbAPIException(403,CUSTOM_MESSAGE_INVALID_APIKEY);
            }
        }
        return null;
    }

}